name: build-and-deploy-workflow

on:
  push:
    branches:
    - "main"
  pull_request:
    branches:
    - "main"
  workflow_dispatch:

jobs:
  build-and-deploy-workflow:
    runs-on: ubuntu-latest
    steps:

    - name: code checkout
      uses: actions/checkout@v3

    - name: Evaluate yaml files via Kubeval
      uses: "brpaz/gh-kubeval-action@master"
      with:
        files: "../resources/"
        github_token: "${{ secrets.GITHUB_TOKEN }}"
      

    - name: install the gcloud cli
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GOOGLE_PROJECT }}
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        install_components: 'gke-gcloud-auth-plugin'
        export_default_credentials: true

    - name: Build and push the docker image to artifact registry
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
      run: |
        gcloud auth configure-docker us-south1-docker.pkg.dev
        docker build -t us-south1-docker.pkg.dev/$GOOGLE_PROJECT/liatrio-app/node:latest .
        docker push us-south1-docker.pkg.dev/$GOOGLE_PROJECT/liatrio-app/node:latest

    - name: Create liatrio-app-cluster-1
      run: gcloud container clusters create liatrio-app-cluster-1 --location=us-central1-a --enable-autoprovisioning --max-cpu=2 --max-memory=4096

    - name: Deploy app image to cluster
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
      run: |
        gcloud container clusters get-credentials liatrio-app-cluster-1 --location=us-central1-a
        sed -i "s/GOOGLE_PROJECT/$GOOGLE_PROJECT/g" resources/deployment.yaml
        kubectl apply -f resources/deployment.yaml
          
    - name: Reserve static IP
      run: gcloud compute addresses create liatrio-static-ip --global
  
    - name: Get static IP
      run: gcloud compute addresses describe liatrio-static-ip --global
    
    - name: Apply web-service & ingress
      run: kubectl apply -f resources/web-service.yaml -f resources/ingress.yaml
      
    - name: get service & ingress lists
      run: |
        kubectl get service -o wide
        kubectl get ingress -A -o wide